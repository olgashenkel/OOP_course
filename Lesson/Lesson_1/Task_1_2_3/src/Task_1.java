// Класс
// Класс – это «чертеж» (описание) сущности предметной области, позволяющий выделить
//некоторые общие характеристики, состояние и поведение, зависящее от состояния.
//Предметная область — множество всех предметов (явлений) решаемой проблемы.

// Экземпляр класса
// Экземпляр класса – отдельный представитель класса, имеющий КОНКРЕТНОЕ состояние
//и поведение, которое полностью определяется описанием класса.
//Состояние – набор данных (полей, атрибутов, членов класса).
//Поведение – функции для работы с данными и выполнения полезной работы.

// Экземпляр класса
// ● Поля
//● Константы
//● События
//● Конструкторы
//● Методы

// ООП
// ООП – объектно-ориентированное программирование.
//Парадигма (стиль, шаблон) разработки ПО, основными понятиями которой являются классы и объекты.
//Говорят, что разработка в стиле ООП ведется с использованием классов объектов, которые
//обладают состоянием и поведением, зависящим от этого состояния.

// ООП: Инкапсуляция
// Инкапсуляция – это свойство системы, позволяющее объединить данные и методы, работающие
//с ними в классе, скрыв детали реализации и защитив от пользователя этого класса объектов.

public class Task_1 {

//    static double distance(int x1, int y1, int x2, int y2) {
//        return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
//    }

//    static double distance(Point2D a, Point2D b) {
//        return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2));
//    }

    public static void main(String[] args) {
        Point2D a = new Point2D(0, 2);
        System.out.println(a); // даже если ничего не написать значение по умолчанию вызывается метод .toString()
                                // вывод в консоли будет --> Point2D@3feba861
        System.out.println(a.getInfo());  // поведение метода можно переписать, т.е. изменить поведение метода (пример приведен в файле Piont2D, vtnjl public String getInfo())
                                            // также можно изменить поведение с помощью метода @Override -  public String toString()
//        a.x = 0;
//        a.y = 2;
//        System.out.println(a.toString());

//        Point2D b = new Point2D(0, 10);
////        b.x = 0;
////        b.y = 10;
//        System.out.println(b.toString());
//        System.out.println(distance(a, b));

        Point2D b = new Point2D(10);
        System.out.println(b.toString()); // даже если ничего не написать значение по умолчанию вызывается метод .toString()
                                         // вывод в консоли будет --> Point2D@5b480cf9
                                         // поведение метода можно переписать, т.е. изменить поведение метода (пример приведен в файле Piont2D, vtnjl public String getInfo())
//        System.out.println(distance(a, b));
    }

}
