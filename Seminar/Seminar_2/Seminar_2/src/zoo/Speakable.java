package zoo;

/*
Механизм наследования очень удобен, но он имеет свои ограничения.
В частности мы можем наследовать только от одного класса.

В языке Java подобную проблему частично позволяют решить интерфейсы.
Интерфейсы определяют некоторый функционал, не имеющий конкретной реализации,
который затем реализуют классы, применяющие эти интерфейсы.
И один класс может применить множество интерфейсов.

Чтобы определить интерфейс, используется ключевое слово interface. Например:

interface Printable{

    void print();
}

Данный интерфейс называется Printable (окончание able - часто встречающееся в названиях методов интерфейсов).
Интерфейс может определять константы и
методы, которые могут иметь, а могут и не иметь реализации.
Методы без реализации похожи на абстрактные методы абстрактных классов.
Так, в данном случае объявлен один метод, который не имеет реализации.

Все методы интерфейса не имеют модификаторов доступа, но фактически по умолчанию
доступ public, так как цель интерфейса - определение функционала для реализации
его классом. Поэтому весь функционал должен быть открыт для реализации.

Чтобы класс применил интерфейс, надо использовать ключевое слово implements

При этом надо учитывать, что если класс применяет интерфейс,
то он должен реализовать все методы интерфейса
 */

public interface Speakable {
//    public static final String name = "hghg"; // в interface могут быть добавлены поля, но ОБЯЗАТЕЛЬНО с присваиваем значений!
    // в interface переменные - по умолчанию - public static final (это можно не прописывать)
    // в interface других переменных быть не может!

    void speak();

//    default void speak() {
//        // можно добавить default и тогда можно добавить тело и описать его, как у полноценного метода.
//        // но это нарушает идею interface, но это используется и в основном, как заглушка
//    }


}
